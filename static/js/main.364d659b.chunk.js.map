{"version":3,"sources":["components/CharacterCard/CharacterCard.js","components/Header/Header.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","react_default","a","createElement","className","onClick","imageClick","alt","id","src","image","Navbar","this","text","score","Component","Wrapper","children","App","state","characters","chosenChar","event","currentPick","target","_this","indexOf","setState","character","sort","i","j","Math","random","concat","_this2","Header","components_Wrapper_Wrapper","map","components_CharacterCard_CharacterCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0/CAaeA,SAVO,SAAAC,GAClB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4CAA4CC,QAASL,EAAMM,YACtEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCAAoCG,IAAKP,EAAMQ,GAAIC,IAAKT,EAAMU,YCa9EC,0LAfP,OACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,sCAERF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAWH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAIS,KAAKZ,MAAMa,QAC5CZ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAYH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,oBAAYS,KAAKZ,MAAMc,kBAVpDC,cCQNC,SARC,SAAAhB,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVJ,EAAMiB,YCsEJC,oNAnEbC,MAAQ,CACNC,aACAP,KAAM,sDACNQ,WAAY,GACZP,MAAO,KAGTR,WAAa,SAAAgB,GACX,IAAMC,EAAcD,EAAME,OAAOjB,IACdkB,EAAKN,MAAME,WAAWK,QAAQH,IAAgB,EAG/DE,EAAKE,SAAS,CACZC,UAAWH,EAAKN,MAAMC,WAAWS,KAAK,SAACC,EAAGC,GACxC,MAAO,GAAMC,KAAKC,WAEpBZ,WAAY,GACZP,MAAO,EACPD,KAAM,yCAGRY,EAAKE,SACH,CACEC,UAAWH,EAAKN,MAAMC,WAAWS,KAAK,SAACC,EAAGC,GACxC,MAAO,GAAMC,KAAKC,WAEpBZ,WAAYI,EAAKN,MAAME,WAAWa,OAAOX,GACzCT,MAAOW,EAAKN,MAAML,MAAQ,EAC1BD,KAAM,wBAER,WAC2B,IAArBY,EAAKN,MAAML,OACbW,EAAKE,SAAS,CACZC,UAAWH,EAAKN,MAAMC,WAAWS,KAAK,SAACC,EAAGC,GACxC,MAAO,GAAMC,KAAKC,WAEpBZ,WAAY,GACZP,MAAO,EACPD,KAAM,mHAQT,IAAAsB,EAAAvB,KACP,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiC,EAAD,CACEvB,KAAMD,KAAKO,MAAMN,KACjBC,MAAOF,KAAKO,MAAML,QAEpBb,EAAAC,EAAAC,cAACkC,EAAD,KACGzB,KAAKO,MAAMC,WAAWkB,IAAI,SAAAV,GAAS,OAClC3B,EAAAC,EAAAC,cAACoC,EAAD,CACEjC,WAAY6B,EAAK7B,WACjBE,GAAIoB,EAAUpB,GACdE,MAAOkB,EAAUlB,mBA3DbK,cCIEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.364d659b.chunk.js","sourcesContent":["import React from 'react'\r\nimport './style.css'\r\n\r\nconst CharacterCard = props => {\r\n    return (\r\n        <div className='card d-flex align-content-start flex-wrap' onClick={props.imageClick}>\r\n            <div className='img-container'>\r\n                <img className='characters justify-content-center' alt={props.id} src={props.image} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharacterCard","import React, { Component } from 'react'\r\nimport './style.css'\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-default navbar-fixed-top\">\r\n                <div className='logo'>\r\n                    <h1><u>DRAGON BALL MEMORY GAME</u></h1>\r\n                </div>\r\n                <ul>\r\n                    <li className='itemLeft'><h1><u>{this.props.text}</u></h1></li>\r\n                    <li className='itemCenter'></li>\r\n                    <li className='itemRight'><h1><u>Score : {this.props.score}</u></h1></li>\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar","import React from 'react'\r\nimport './style.css'\r\n\r\nconst Wrapper = props => {\r\n    return (\r\n        <div className='wrapper'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Wrapper","import React, { Component } from 'react';\nimport characters from './characters.json'\nimport CharacterCard from './components/CharacterCard'\nimport Header from './components/Header'\nimport Wrapper from './components/Wrapper'\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    characters,\n    text: 'Click image to begin. You win when your score is 8.',\n    chosenChar: [],\n    score: 0\n  }\n\n  imageClick = event => {\n    const currentPick = event.target.alt\n    const CharPicked = this.state.chosenChar.indexOf(currentPick) > -1;\n\n    if (CharPicked) {\n      this.setState({\n        character: this.state.characters.sort((i, j) => {\n          return 0.5 - Math.random()\n        }),\n        chosenChar: [],\n        score: 0,\n        text: 'YOU LOSE! CLICK IMAGE TO PLAY AGAIN!'\n      })\n    } else {\n      this.setState(\n        {\n          character: this.state.characters.sort((i, j) => {\n            return 0.5 - Math.random()\n          }),\n          chosenChar: this.state.chosenChar.concat(currentPick),\n          score: this.state.score + 1,\n          text: 'GOOD JOB KEEP GOING!'\n        },\n        () => {\n          if (this.state.score === 8) {\n            this.setState({\n              character: this.state.characters.sort((i, j) => {\n                return 0.5 - Math.random()\n              }),\n              chosenChar: [],\n              score: 0,\n              text: 'YOU WIN! ClICK IMAGE TO PLAY AGAIN!'\n            })\n          }\n        }\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header\n          text={this.state.text}\n          score={this.state.score}\n        />\n        <Wrapper>\n          {this.state.characters.map(character => (\n            <CharacterCard\n              imageClick={this.imageClick}\n              id={character.id}\n              image={character.image}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}